# -*- coding: utf-8 -*-
"""rainfall17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B5wEBGYUK7ug8Kpt_aZrS9dmbC0mPucv
"""

import pandas as pd
d=pd.read_csv('/content/rainfall prediction.csv')
print(d)

from sklearn.linear_model import LinearRegression
import numpy as np

# Define x_train and y_train as numpy arrays containing your training data
x_train = np.array([[1, 2], [3, 4], [5, 6]])
y_train = np.array([7, 8, 9])

# Define x_test as a numpy array containing your testing data
x_test = np.array([[7, 8], [9, 10]])
y_test = np.array([10.2, 12.1])

lr = LinearRegression()
mm = lr.fit(x_train, y_train)

yp = mm.predict(x_test)
print(yp)

from sklearn.metrics import mean_squared_error

print(mean_squared_error)

print(yp,y_test)

from sklearn.metrics import mean_absolute_error

print(mean_absolute_error)

print(yp,y_test)

print(y_test.shape)
print(yp.shape)

print("Shape of y_test:", y_test.shape)
print("Shape of yp:", yp.shape)

from sklearn.metrics import mean_absolute_error

print("Length of yp:", len(yp))
print("Length of y_test:", len(y_test))

mse = mean_squared_error(y_test, yp)

print("Mean Squared Error:", mse)

mae = mean_absolute_error(y_test, yp)

print("Mean Absolute Error:", mae)

!pip show scikit-learn

from sklearn.neighbors import KNeighborsRegressor

print(KNeighborsRegressor)

knn = KNeighborsRegressor(n_neighbors=3)

knn.fit(x_train, y_train)
yp = knn.predict(x_test)

mae = mean_absolute_error(y_test, yp)

print("Mean Absolute Error:", mae)

mse = mean_squared_error(y_test, yp)
print("Mean Squared Error:", mse)

from sklearn.metrics import mean_squared_error

print(mean_squared_error(yp,y_test))

from sklearn.metrics import mean_absolute_error

print(mean_absolute_error(yp,y_test))

from sklearn.svm import SVR
model = SVR(kernel='linear')

model.fit(x_train,y_train)

yp=model.predict(x_test)

mae = mean_absolute_error(y_test, y_pred)

print("Mean Absolute Error:", mae)

mse = mean_squared_error(y_test, yp)
print("Mean Squared Error:", mse)

from sklearn.metrics import mean_squared_error
print(mean_squared_error(yp,y_test))

from sklearn.metrics import mean_absolute_error
print(mean_absolute_error(yp,y_test))

from sklearn.tree import DecisionTreeRegressor

dt = DecisionTreeRegressor()

dt.fit(x_train, y_train)

yp = dt.predict(x_test)

mae = mean_absolute_error(y_test, yp)
print("Mean Absolute Error:", mae)

mse = mean_squared_error(y_test, yp)
print("Mean Squared Error:", mse)

from sklearn.tree import DecisionTreeRegressor

model=DecisionTreeRegressor()

model.fit(x_train,y_train)

yp=model.predict(x_test)
print(yp)

from sklearn.metrics import mean_squared_error

print(mean_squared_error(y_test,yp))

from sklearn import tree

tree.plot_tree(model,filled=True)

# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Load your rainfall dataset (replace with your actual data)
# Read the data into a Pandas DataFrame
data = pd.read_csv('/content/rainfall prediction.csv')
print(f"Random Forest Model Performance:")
print(f"MSE: {mse:.2f}")
print(f"MAE: {mae:.2f}")